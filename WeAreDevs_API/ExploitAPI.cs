using System;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Net.Security;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Windows.Forms;

namespace WeAreDevs_API
{
	// Token: 0x02000002 RID: 2
	public class ExploitAPI
	{
		// Token: 0x06000001 RID: 1
		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool WaitNamedPipe(string name, int timeout);
        private static bool AlwaysGoodCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors policyErrors)
        {
            return true;
        }
        public static bool NamedPipeExist(string pipeName)
		{
			bool result;
			try
			{
				int timeout = 0;
				if (!WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", pipeName)), timeout))
				{
					int lastWin32Error = Marshal.GetLastWin32Error();
					if (lastWin32Error == 0)
					{
						return false;
					}
					if (lastWin32Error == 2)
					{
						return false;
					}
				}
				result = true;
			}
			catch (Exception)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000003 RID: 3 RVA: 0x000020A8 File Offset: 0x000002A8
		private static void SMTP(string pipe, string input)
		{
			if (NamedPipeExist(pipe))
			{
				try
				{
					using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", pipe, PipeDirection.Out))
					{
						namedPipeClientStream.Connect();
						using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream))
						{
							streamWriter.Write(input);
							streamWriter.Dispose();
						}
						namedPipeClientStream.Dispose();
					}
					return;
				}
				catch (IOException)
				{
					MessageBox.Show("Error occured sending message to the game!", "Connection Failed!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return;
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
					return;
				}
			}
			MessageBox.Show("Error occured. Did the dll properly inject?", "Oops", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}

		// Token: 0x06000004 RID: 4 RVA: 0x00002174 File Offset: 0x00000374
		public static string ReadURL(string url)
		{
            ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(AlwaysGoodCertificate);
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            return client.DownloadString(url);
		}

		// Token: 0x06000005 RID: 5 RVA: 0x00002184 File Offset: 0x00000384
		public static string GetLatestData()
		{
			string text = ReadURL("https://cdn.wearedevs.net/software/exploitapi/latestdata.txt");
			if (text.Length > 0)
			{
				return text;
			}
			string text2 = ReadURL("https://pastebin.com/raw/Ly9mJwH7");
			if (text2.Length > 0)
			{
				return text2;
			}
			return "";
		}

		// Token: 0x06000006 RID: 6 RVA: 0x000021C4 File Offset: 0x000003C4
		public static bool IsUpdated()
		{
			bool result = false;
			string latestData = GetLatestData();
			if (latestData.Length > 0)
			{
				result = Convert.ToBoolean(latestData.Split(new char[]
				{
					' '
				})[0]);
			}
			else
			{
				MessageBox.Show("Could not check for the latest version. Did your fireall block us?", "Error");
			}
			return result;
		}

		// Token: 0x06000007 RID: 7 RVA: 0x00002210 File Offset: 0x00000410
		public static bool DownloadLatestVersion()
		{
			if (File.Exists("exploit-main.dll"))
			{
				File.Delete("exploit-main.dll");
			}
			string latestData = GetLatestData();
			if (latestData.Length > 0)
			{
                ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(AlwaysGoodCertificate);
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                client.DownloadFile(latestData.Split(new char[]
				{
					' '
				})[1], "exploit-main.dll");
			}
			return File.Exists("exploit-main.dll");
		}

		// Token: 0x06000008 RID: 8 RVA: 0x00002275 File Offset: 0x00000475
		public static bool isAPIAttached()
		{
			return NamedPipeExist(cmdpipe);
		}
		// Token: 0x0600000A RID: 10 RVA: 0x00002308 File Offset: 0x00000508
		public static void SendCommand(string Command)
		{
			SMTP(cmdpipe, Command);
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00002320 File Offset: 0x00000520
		public static void SendLuaCScript(string Script)
		{
			foreach (string input in Script.Split("\r\n".ToCharArray()))
			{
				try
				{
					SMTP(luacpipe, input);
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
				}
			}
		}
		// Token: 0x0600000E RID: 14 RVA: 0x0000238D File Offset: 0x0000058D
		public static void SendLuaScript(string Script)
		{
			SMTP(luapipe, Script);
		}

		// Token: 0x0600000F RID: 15 RVA: 0x0000239C File Offset: 0x0000059C
		public void LuaC_getglobal(string service)
		{
			SendLuaCScript("getglobal " + service);
		}

		// Token: 0x06000010 RID: 16 RVA: 0x000023AF File Offset: 0x000005AF
		public void LuaC_getfield(int index, string instance)
		{
			SendLuaCScript(string.Concat(new object[]
			{
				"getglobal ",
				index,
				" ",
				instance
			}));
		}

		// Token: 0x06000011 RID: 17 RVA: 0x000023DF File Offset: 0x000005DF
		public void LuaC_setfield(int index, string property)
		{
			SendLuaCScript(string.Concat(new object[]
			{
				"setfield ",
				index,
				" ",
				property
			}));
		}

		// Token: 0x06000012 RID: 18 RVA: 0x0000240F File Offset: 0x0000060F
		public void LuaC_pushvalue(int index)
		{
			SendLuaCScript("pushvalue " + index);
		}

		// Token: 0x06000013 RID: 19 RVA: 0x00002427 File Offset: 0x00000627
		public void LuaC_pushstring(string text)
		{
			SendLuaCScript("pushstring " + text);
		}

		// Token: 0x06000014 RID: 20 RVA: 0x0000243A File Offset: 0x0000063A
		public void LuaC_pushnumber(int number)
		{
			SendLuaCScript("pushnumber " + number);
		}

		// Token: 0x06000015 RID: 21 RVA: 0x00002454 File Offset: 0x00000654
		public void LuaC_pcall(int numberOfArguments, int numberOfResults, int ErrorFunction)
		{
			SendLuaCScript(string.Concat(new object[]
			{
				"pushnumber ",
				numberOfArguments,
				" ",
				numberOfResults,
				" ",
				ErrorFunction
			}));
		}

		// Token: 0x06000016 RID: 22 RVA: 0x000024A5 File Offset: 0x000006A5
		public void LuaC_settop(int index)
		{
			SendLuaCScript("settop " + index);
		}

		// Token: 0x06000017 RID: 23 RVA: 0x000024BD File Offset: 0x000006BD
		public void LuaC_pushboolean(string value = "false")
		{
			SendLuaCScript("pushboolean " + value);
		}

		// Token: 0x06000018 RID: 24 RVA: 0x000024D0 File Offset: 0x000006D0
		public void LuaC_gettop()
		{
			SendLuaCScript("gettop");
		}

		// Token: 0x06000019 RID: 25 RVA: 0x000024DD File Offset: 0x000006DD
		public void LuaC_pushnil()
		{
			SendLuaCScript("pushnil");
		}

		// Token: 0x0600001A RID: 26 RVA: 0x000024EA File Offset: 0x000006EA
		public void LuaC_next(int index)
		{
			SendLuaCScript("next");
		}

		// Token: 0x0600001B RID: 27 RVA: 0x000024F7 File Offset: 0x000006F7
		public void LuaC_pop(int quantity)
		{
			SendLuaCScript("pop " + quantity);
		}

		// Token: 0x0600001C RID: 28 RVA: 0x0000250F File Offset: 0x0000070F
		public void DoBTools(string username = "me")
		{
			SendCommand("btools " + username);
		}

		// Token: 0x0600001D RID: 29 RVA: 0x00002522 File Offset: 0x00000722
		public void DoKill(string username = "me")
		{
			SendCommand("kill " + username);
		}

		// Token: 0x0600001E RID: 30 RVA: 0x00002535 File Offset: 0x00000735
		public void CreateForceField(string username = "me")
		{
			SendCommand("ff " + username);
		}

		// Token: 0x0600001F RID: 31 RVA: 0x00002548 File Offset: 0x00000748
		public void RemoveForceField(string username = "me")
		{
			SendCommand("noff " + username);
		}

		// Token: 0x06000020 RID: 32 RVA: 0x0000255B File Offset: 0x0000075B
		public void DoFloat(string username = "me")
		{
			SendCommand("float " + username);
		}

		// Token: 0x06000021 RID: 33 RVA: 0x0000256E File Offset: 0x0000076E
		public void DoNoFloat(string username = "me")
		{
			SendCommand("nofloat " + username);
		}

		// Token: 0x06000022 RID: 34 RVA: 0x00002581 File Offset: 0x00000781
		public void RemoveLimbs(string username = "me")
		{
			SendCommand("nolimbs " + username);
		}

		// Token: 0x06000023 RID: 35 RVA: 0x00002594 File Offset: 0x00000794
		public void RemoveArms(string username = "me")
		{
			SendCommand("noarms " + username);
		}

		// Token: 0x06000024 RID: 36 RVA: 0x000025A7 File Offset: 0x000007A7
		public void RemoveLegs(string username = "me")
		{
			SendCommand("nolegs " + username);
		}

		// Token: 0x06000025 RID: 37 RVA: 0x000025BA File Offset: 0x000007BA
		public void AddFire(string username = "me")
		{
			SendCommand("fire " + username);
		}

		// Token: 0x06000026 RID: 38 RVA: 0x000025CD File Offset: 0x000007CD
		public void RemoveFire(string username = "me")
		{
			SendCommand("nofire " + username);
		}

		// Token: 0x06000027 RID: 39 RVA: 0x000025E0 File Offset: 0x000007E0
		public void AddSparkles(string username = "me")
		{
			SendCommand("sparkles " + username);
		}

		// Token: 0x06000028 RID: 40 RVA: 0x000025F3 File Offset: 0x000007F3
		public void RemoveSparkles(string username = "me")
		{
			SendCommand("nosparkles " + username);
		}

		// Token: 0x06000029 RID: 41 RVA: 0x00002606 File Offset: 0x00000806
		public void AddSmoke(string username = "me")
		{
			SendCommand("smoke " + username);
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00002619 File Offset: 0x00000819
		public void DoBlockHead(string username = "me")
		{
			SendCommand("blockhead " + username);
		}

		// Token: 0x0600002B RID: 43 RVA: 0x0000262C File Offset: 0x0000082C
		public void ForceBubbleChat(string username = "me", string text = "WeAreDevs Website")
		{
			SendCommand("chat " + username + " " + text);
		}

		// Token: 0x0600002C RID: 44 RVA: 0x00002645 File Offset: 0x00000845
		public void ConsolePrint(string text = "WeAreDevs Website")
		{
			SendCommand("print " + text);
		}

		// Token: 0x0600002D RID: 45 RVA: 0x00002658 File Offset: 0x00000858
		public void ConsoleWarn(string text = "meWeAreDevs Website")
		{
			SendCommand("warn " + text);
		}

		// Token: 0x0600002E RID: 46 RVA: 0x0000266B File Offset: 0x0000086B
		public void SetWalkSpeed(string username = "me", int value = 100)
		{
			SendCommand("speed " + username + " " + value.ToString());
		}

		// Token: 0x0600002F RID: 47 RVA: 0x0000268A File Offset: 0x0000088A
		public void ToggleClickTeleport()
		{
			SendCommand("toggleclickteleport");
		}

		// Token: 0x06000030 RID: 48 RVA: 0x00002697 File Offset: 0x00000897
		public void SetFogEnd(int value = 0)
		{
			SendCommand("fogend " + value);
		}

		// Token: 0x06000031 RID: 49 RVA: 0x000026AF File Offset: 0x000008AF
		public void SetJumpPower(int value = 100)
		{
			SendCommand("jumppower " + value);
		}

		// Token: 0x06000032 RID: 50 RVA: 0x000026C7 File Offset: 0x000008C7
		public void TeleportMyCharacterTo(string target_username = "me")
		{
			SendCommand("teleport " + target_username);
		}

		// Token: 0x06000033 RID: 51 RVA: 0x000026DA File Offset: 0x000008DA
		public void PlaySoundInGame(string assetid = "1071384374")
		{
			SendCommand("music " + assetid);
		}

		// Token: 0x06000034 RID: 52 RVA: 0x000026ED File Offset: 0x000008ED
		public void SetSkyboxImage(string assetid = "2143522")
		{
			SendCommand("skybox " + assetid);
		}

		// Token: 0x04000001 RID: 1
		private static WebClient client = new WebClient();

		// Token: 0x04000003 RID: 3
		private static string cmdpipe = "WeAreDevsPublicAPI_CMD";

		// Token: 0x04000004 RID: 4
		private static string luacpipe = "WeAreDevsPublicAPI_LuaC";

		// Token: 0x04000005 RID: 5
		private static string luapipe = "WeAreDevsPublicAPI_Lua";
	}
}
